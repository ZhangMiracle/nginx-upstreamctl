#!/usr/bin/env python

import sys
import os
import argparse

from pynginxconfig import NginxConfig

# Sample conf:
#
# old_conf.load('''
# upstream backend {
#     server 1.1.1.1:8000;
#
# }''')


def get_current_servers(upstream_config, upstream_name):

    old_conf = NginxConfig()

    if os.path.isfile(upstream_config):
        with open(upstream_config, 'r') as f:
            old_conf.load(f.read())

    server_block = old_conf.get(('upstream', upstream_name))
    if server_block:
        return server_block['value']
    return []


def write_config(servers, upstream_config, upstream_name, default_backend=None):

    new_conf = NginxConfig()

    if len(servers) == 0 and default_backend:
        servers.append(('server', default_backend))
    else:
        # remove previously (possibly) added default backend
        servers = [server for server in servers if server[1] != default_backend]

    new_conf.append({'name': 'upstream', 'param': upstream_name, 'value': servers})
    # print(new_conf.gen_config())
    with open(upstream_config, 'w') as f:
        f.write(new_conf.gen_config())


def add(server, upstream_config, upstream_name, **kwargs):
    """
    Add a server to the config
    """
    servers = get_current_servers(upstream_config, upstream_name)
    servers.append(('server', server))
    write_config(servers, upstream_config, upstream_name, **kwargs)


def rm(server_to_remove, upstream_config, upstream_name, **kwargs):
    """
    Remove a server from the config
    """
    servers = get_current_servers(upstream_config, upstream_name)
    new_servers = [server for server in servers if server[1] != server_to_remove]
    write_config(new_servers, upstream_config, upstream_name, **kwargs)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Controls upstream config')
    parser.add_argument('command', metavar='command', type=str,
                        help='command to execute', choices=['add', 'rm'])
    parser.add_argument('server', metavar='server', type=str,
                        help='server to add/rm')
    parser.add_argument('--upstream_config', type=str, required=True,
                        help='upstream config file to parse/write changes to')
    parser.add_argument('--upstream_name', type=str, default='backend',
                        help='a name for "upstream" nginx directive')
    parser.add_argument('--default_backend', type=str, default=None,
                        help='default backend to write to the config if the actual server list is empty')

    args = parser.parse_args()

    getattr(sys.modules[__name__], args.command)(args.server, args.upstream_config, args.upstream_name,
                                                 default_backend=args.default_backend)